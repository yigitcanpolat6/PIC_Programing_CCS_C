D G "__PCM__" 0 27 ""5.007""
D G "__DEVICE__" 0 27 "1828"
D G "__DATE__" 0 27 ""02-Tem-23""
D G "__TIME__" 0 27 ""18:48:35"" "Standard Header file for the PIC16F1828 device ////////////////"
c L "set_tris_a" 1 5 15 "FUNCTION"
v L "value" 1 30 "int8" `54 
f B "set_tris_a" 1 30 "void(int8 value)" `53 
v L "value" 1 31 "int8" `56 
f B "set_tris_b" 1 31 "void(int8 value)" `55 
v L "value" 1 32 "int8" `58 
f B "set_tris_c" 1 32 "void(int8 value)" `57 
f B "get_tris_a" 1 33 "int8()" `59 
f B "get_tris_b" 1 34 "int8()" `60 
f B "get_tris_c" 1 35 "int8()" `61 
v L "value" 1 36 "int8" `63 
f B "output_a" 1 36 "void(int8 value)" `62 
v L "value" 1 37 "int8" `65 
f B "output_b" 1 37 "void(int8 value)" `64 
v L "value" 1 38 "int8" `67 
f B "output_c" 1 38 "void(int8 value)" `66 
f B "input_a" 1 39 "int8()" `68 
f B "input_b" 1 40 "int8()" `69 
f B "input_c" 1 41 "int8()" `70 
f B "input_change_a" 1 42 "int8()" `71 
f B "input_change_b" 1 43 "int8()" `72 
f B "input_change_c" 1 44 "int8()" `73 
v L "pin" 1 45 "int16" `75 
f B "input" 1 45 "int8(int16 pin)" `74 
v L "pin" 1 46 "int16" `77 
f B "input_state" 1 46 "int8(int16 pin)" `76 
v L "pin" 1 47 "int16" `79 
f B "output_low" 1 47 "void(int16 pin)" `78 
v L "pin" 1 48 "int16" `81 
f B "output_high" 1 48 "void(int16 pin)" `80 
v L "pin" 1 49 "int16" `83 
f B "output_toggle" 1 49 "void(int16 pin)" `82 
v L "pin" 1 50 "int16" `85 
v L "level" 1 50 "int8" `86 
f B "output_bit" 1 50 "void(int16 pin,int8 level)" `84 
v L "pin" 1 51 "int16" `88 
f B "output_float" 1 51 "void(int16 pin)" `87 
v L "pin" 1 52 "int16" `90 
f B "output_drive" 1 52 "void(int16 pin)" `89  "Constants used to identify pins in the above are:"
d G "PIN_A0" 1 56 "96"
d G "PIN_A1" 1 57 "97"
d G "PIN_A2" 1 58 "98"
d G "PIN_A3" 1 59 "99"
d G "PIN_A4" 1 60 "100"
d G "PIN_A5" 1 61 "101"
d G "PIN_B4" 1 63 "108"
d G "PIN_B5" 1 64 "109"
d G "PIN_B6" 1 65 "110"
d G "PIN_B7" 1 66 "111"
d G "PIN_C0" 1 68 "112"
d G "PIN_C1" 1 69 "113"
d G "PIN_C2" 1 70 "114"
d G "PIN_C3" 1 71 "115"
d G "PIN_C4" 1 72 "116"
d G "PIN_C5" 1 73 "117"
d G "PIN_C6" 1 74 "118"
d G "PIN_C7" 1 75 "119"
d G "FALSE" 1 78 "0"
d G "TRUE" 1 79 "1"
d G "BYTE" 1 81 "int8"
d G "BOOLEAN" 1 82 "int1"
d G "getc" 1 84 "getch"
d G "fgetc" 1 85 "getch"
d G "getchar" 1 86 "getch"
d G "putc" 1 87 "putchar"
d G "fputc" 1 88 "putchar"
d G "fgets" 1 89 "gets"
d G "fputs" 1 90 "puts"
c L "output_drive" 1 5 3 "FUNCTION"
f B "restart_cause" 1 95 "int8()" `91 
f B "reset_cpu" 1 96 "void()" `92 
f B "sleep" 1 97 "void()" `93 
v L "type" 1 98 "int8" `95 
f G "sleep" 1 98 "void(int8 type)" `94  "Constants returned from RESTART_CAUSE() are:"
d G "NORMAL_POWER_UP" 1 100 "0x3C"
d G "BROWNOUT_RESTART" 1 101 "0x3E"
d G "MCLR_FROM_SLEEP" 1 102 "0x27"
d G "WDT_TIMEOUT" 1 103 "0x1F"
d G "WDT_FROM_SLEEP" 1 104 "0x0F"
d G "INTERRUPT_FROM_SLEEP" 1 105 "0x2F"
d G "MCLR_FROM_RUN" 1 106 "0x37"
d G "RESET_INSTRUCTION" 1 107 "0x3B"
d G "STACK_OVERFLOW" 1 108 "0xBF"
d G "STACK_UNDERFLOW" 1 109 "0x7F"
c L "sleep" 1 5 5 "FUNCTION"
v L "mode" 1 116 "int8" `97 
f B "setup_timer_0" 1 116 "void(int8 mode)" `96 
v L "value" 1 117 "int8" `99 
f B "set_timer0" 1 117 "void(int8 value)" `98 
f B "get_timer0" 1 118 "int8()" `100 
v L "mode" 1 119 "int8" `102 
v L "prescaler" 1 119 "int8" `103 
f B "setup_counters" 1 119 "void(int8 mode,int8 prescaler)" `101 
v L "value" 1 120 "int8" `105 
f B "set_rtcc" 1 120 "void(int8 value)" `104 
f B "get_rtcc" 1 121 "int8()" `106  "Constants used for SETUP_TIMER_0() are:"
d G "T0_INTERNAL" 1 123 "0"
d G "T0_EXT_L_TO_H" 1 124 "32"
d G "T0_EXT_H_TO_L" 1 125 "48"
d G "T0_DIV_1" 1 127 "8"
d G "T0_DIV_2" 1 128 "0"
d G "T0_DIV_4" 1 129 "1"
d G "T0_DIV_8" 1 130 "2"
d G "T0_DIV_16" 1 131 "3"
d G "T0_DIV_32" 1 132 "4"
d G "T0_DIV_64" 1 133 "5"
d G "T0_DIV_128" 1 134 "6"
d G "T0_DIV_256" 1 135 "7"
d G "T0_8_BIT" 1 138 "0"
d G "RTCC_INTERNAL" 1 140 "0" "The following are provided for compatibility"
d G "RTCC_EXT_L_TO_H" 1 141 "32" "with older compiler versions"
d G "RTCC_EXT_H_TO_L" 1 142 "48"
d G "RTCC_DIV_1" 1 143 "8"
d G "RTCC_DIV_2" 1 144 "0"
d G "RTCC_DIV_4" 1 145 "1"
d G "RTCC_DIV_8" 1 146 "2"
d G "RTCC_DIV_16" 1 147 "3"
d G "RTCC_DIV_32" 1 148 "4"
d G "RTCC_DIV_64" 1 149 "5"
d G "RTCC_DIV_128" 1 150 "6"
d G "RTCC_DIV_256" 1 151 "7"
d G "RTCC_8_BIT" 1 152 "0"
c L "get_rtcc" 1 5 7 "FUNCTION"
v L "mode" 1 162 "int16" `108 
f B "setup_wdt" 1 162 "void(int16 mode)" `107 
f B "restart_wdt" 1 163 "void()" `109  "Constants used for SETUP_WDT() are:"
d G "WDT_ON" 1 165 "0x1000"
d G "WDT_OFF" 1 166 "0x2000"
d G "WDT_1MS" 1 168 "0x100"
d G "WDT_2MS" 1 169 "0x101"
d G "WDT_4MS" 1 170 "0x102"
d G "WDT_8MS" 1 171 "0x103"
d G "WDT_16MS" 1 172 "0x104"
d G "WDT_32MS" 1 173 "0x105"
d G "WDT_64MS" 1 174 "0x106"
d G "WDT_128MS" 1 175 "0x107"
d G "WDT_256MS" 1 176 "0x108"
d G "WDT_512MS" 1 177 "0x109"
d G "WDT_1S" 1 178 "0x10A"
d G "WDT_2S" 1 179 "0x10B"
d G "WDT_4S" 1 180 "0x10C"
d G "WDT_8S" 1 181 "0x10D"
d G "WDT_16S" 1 182 "0x10E"
d G "WDT_32S" 1 183 "0x10F"
d G "WDT_64S" 1 184 "0x110"
d G "WDT_128S" 1 185 "0x111"
d G "WDT_256S" 1 186 "0x112"
c L "restart_wdt" 1 5 3 "FUNCTION"
v L "mode" 1 191 "int16" `111 
f B "setup_timer_1" 1 191 "void(int16 mode)" `110 
f B "get_timer1" 1 192 "int16()" `112 
v L "value" 1 193 "int16" `114 
f B "set_timer1" 1 193 "void(int16 value)" `113  "Constants used for SETUP_TIMER_1() are:"
d G "T1_DISABLED" 1 196 "0"
d G "T1_CAPSENSE" 1 197 "0xC5"
d G "T1_EXTERNAL" 1 198 "0x85"
d G "T1_EXTERNAL_SYNC" 1 199 "0x81"
d G "T1_FOSC" 1 200 "0x45"
d G "T1_INTERNAL" 1 201 "0x05"
d G "T1_ENABLE_T1OSC" 1 203 "0x08"
d G "T1_DIV_BY_1" 1 205 "0x00"
d G "T1_DIV_BY_2" 1 206 "0x10"
d G "T1_DIV_BY_4" 1 207 "0x20"
d G "T1_DIV_BY_8" 1 208 "0x30"
d G "T1_GATE" 1 210 "0x8000"
d G "T1_GATE_INVERTED" 1 211 "0xC000"
d G "T1_GATE_TOGGLE" 1 212 "0xA000"
d G "T1_GATE_SINGLE" 1 213 "0x9000"
d G "T1_GATE_TIMER0" 1 214 "0x8100"
d G "T1_GATE_COMP1" 1 215 "0x8200"
d G "T1_GATE_COMP2" 1 216 "0x8300"
d G "T1_GATE_A4" 1 218 "0"
d G "T1_GATE_A3" 1 219 "0x10000"
c L "set_timer1" 1 5 3 "FUNCTION"
v L "mode" 1 224 "int8" `116 
v L "period" 1 224 "int8" `117 
v L "postscale" 1 224 "int8" `118 
f B "setup_timer_2" 1 224 "void(int8 mode,int8 period,int8 postscale)" `115 
f B "get_timer2" 1 225 "int8()" `119 
v L "value" 1 226 "int8" `121 
f B "set_timer2" 1 226 "void(int8 value)" `120  "Constants used for SETUP_TIMER_2() are:"
d G "T2_DISABLED" 1 228 "0"
d G "T2_DIV_BY_1" 1 229 "4"
d G "T2_DIV_BY_4" 1 230 "5"
d G "T2_DIV_BY_16" 1 231 "6"
d G "T2_DIV_BY_64" 1 232 "7"
c L "set_timer2" 1 5 3 "FUNCTION"
v L "mode" 1 237 "int16" `123 
v L "period" 1 237 "int8" `124 
v L "postscaler" 1 237 "int8" `125 
f B "setup_timer_4" 1 237 "void(int16 mode,int8 period,int8 postscaler)" `122 
f B "get_timer4" 1 238 "int8()" `126 
v L "value" 1 239 "int8" `128 
f B "set_timre4" 1 239 "void(int8 value)" `127  "Constants used for SETUP_TIMER_4() are:"
d G "T4_DISABLED" 1 241 "0"
d G "T4_DIV_BY_1" 1 242 "4"
d G "T4_DIV_BY_4" 1 243 "5"
d G "T4_DIV_BY_16" 1 244 "6"
d G "T4_DIV_BY_64" 1 245 "7"
c L "set_timre4" 1 5 3 "FUNCTION"
v L "mode" 1 250 "int8" `130 
v L "period" 1 250 "int8" `131 
v L "postscaler" 1 250 "int8" `132 
f B "steup_timer_6" 1 250 "void(int8 mode,int8 period,int8 postscaler)" `129 
f B "get_timer6" 1 251 "int8()" `133 
v L "value" 1 252 "int8" `135 
f B "set_timer6" 1 252 "void(int8 value)" `134  "Constants used for SETUP_TIMER_6() are:"
d G "T6_DISABLED" 1 255 "0"
d G "T6_DIV_BY_1" 1 256 "4"
d G "T6_DIV_BY_4" 1 257 "5"
d G "T6_DIV_BY_16" 1 258 "6"
d G "T6_DIV_BY_64" 1 259 "7"
c L "set_timer6" 1 5 4 "FUNCTION"
v L "mode" 1 265 "int32" `137 
f B "setup_ccp1" 1 265 "void(int32 mode)" `136 
v L "mode" 1 266 "int32" `139 
v L "pwm" 1 266 "int8" `140 
f G "setup_ccp1" 1 266 "void(int32 mode,int8 pwm)" `138 
v L "value" 1 267 "int16" `142 
f B "set_pwm1_duty" 1 267 "void(int16 value)" `141  "Constants used for SETUP_CCPx() are:"
d G "CCP_OFF" 1 269 "0"
d G "CCP_CAPTURE_FE" 1 270 "4"
d G "CCP_CAPTURE_RE" 1 271 "5"
d G "CCP_CAPTURE_DIV_4" 1 272 "6"
d G "CCP_CAPTURE_DIV_16" 1 273 "7"
d G "CCP_COMPARE_SET_ON_MATCH" 1 274 "8"
d G "CCP_COMPARE_CLR_ON_MATCH" 1 275 "9"
d G "CCP_COMPARE_INT" 1 276 "0xA"
d G "CCP_COMPARE_RESET_TIMER" 1 277 "0xB"
d G "CCP_PWM" 1 278 "0xC"
d G "CCP_PWM_PLUS_1" 1 279 "0x1c"
d G "CCP_PWM_PLUS_2" 1 280 "0x2c"
d G "CCP_PWM_PLUS_3" 1 281 "0x3c"
d G "CCP_PWM_H_H" 1 286 "0x0c"
d G "CCP_PWM_H_L" 1 287 "0x0d"
d G "CCP_PWM_L_H" 1 288 "0x0e"
d G "CCP_PWM_L_L" 1 289 "0x0f"
d G "CCP_PWM_FULL_BRIDGE" 1 291 "0x40"
d G "CCP_PWM_FULL_BRIDGE_REV" 1 292 "0xC0"
d G "CCP_PWM_HALF_BRIDGE" 1 293 "0x80"
d G "CCP_SHUTDOWN_ON_COMP1" 1 295 "0x100000"
d G "CCP_SHUTDOWN_ON_COMP2" 1 296 "0x200000"
d G "CCP_SHUTDOWN_ON_COMP" 1 297 "0x300000"
d G "CCP_SHUTDOWN_ON_INT0" 1 298 "0x400000"
d G "CCP_SHUTDOWN_ON_COMP1_INT0" 1 299 "0x500000"
d G "CCP_SHUTDOWN_ON_COMP2_INT0" 1 300 "0x600000"
d G "CCP_SHUTDOWN_ON_COMP_INT0" 1 301 "0x700000"
d G "CCP_SHUTDOWN_AC_L" 1 303 "0x000000"
d G "CCP_SHUTDOWN_AC_H" 1 304 "0x040000"
d G "CCP_SHUTDOWN_AC_F" 1 305 "0x080000"
d G "CCP_SHUTDOWN_BD_L" 1 307 "0x000000"
d G "CCP_SHUTDOWN_BD_H" 1 308 "0x010000"
d G "CCP_SHUTDOWN_BD_F" 1 309 "0x020000"
d G "CCP_SHUTDOWN_RESTART" 1 311 "0x80000000"
d G "CCP_PULSE_STEERING_A" 1 313 "0x01000000"
d G "CCP_PULSE_STEERING_B" 1 314 "0x02000000"
d G "CCP_PULSE_STEERING_C" 1 315 "0x04000000"
d G "CCP_PULSE_STEERING_D" 1 316 "0x08000000"
d G "CCP_PULSE_STEERING_SYNC" 1 317 "0x10000000"
d G "CCP_TIMER2" 1 320 "0x0000"
d G "CCP_TIMER4" 1 321 "0x1000"
d G "CCP_TIMER6" 1 322 "0x2000"
d G "CCP_P1C_C3" 1 324 "0x000"
d G "CCP_P1C_C1" 1 325 "0x100"
d G "CCP_P1D_C2" 1 326 "0x000"
d G "CCP_P1D_C0" 1 327 "0x200"
d G "CCP2_C3" 1 328 "0x000"
d G "CCP2_A5" 1 329 "0x100"
d G "CCP_P2B_C2" 1 330 "0x000"
d G "CCP_P2B_A4" 1 331 "0x200"
c L "set_pwm1_duty" 1 5 1 "FUNCTION"
v L "mode" 1 335 "int32" `147 
f B "setup_ccp2" 1 335 "void(int32 mode)" `146 
v L "mode" 1 336 "int32" `149 
v L "pwm" 1 336 "int8" `150 
f G "setup_ccp2" 1 336 "void(int32 mode,int8 pwm)" `148 
v L "value" 1 337 "int16" `152 
f B "set_pwm2_duty" 1 337 "void(int16 value)" `151 
c L "set_pwm2_duty" 1 5 1 "FUNCTION"
v L "mode" 1 343 "int32" `157 
f B "setup_ccp3" 1 343 "void(int32 mode)" `156 
v L "mode" 1 344 "int32" `159 
v L "pwm" 1 344 "int8" `160 
f G "setup_ccp3" 1 344 "void(int32 mode,int8 pwm)" `158 
v L "value" 1 345 "int16" `162 
f B "set_pwm3_duty" 1 345 "void(int16 value)" `161 
c L "set_pwm3_duty" 1 5 1 "FUNCTION"
v L "mode" 1 351 "int32" `167 
f B "setup_ccp4" 1 351 "void(int32 mode)" `166 
v L "mode" 1 352 "int32" `169 
v L "pwm" 1 352 "int8" `170 
f G "setup_ccp4" 1 352 "void(int32 mode,int8 pwm)" `168 
v L "value" 1 353 "int16" `172 
f B "set_pwm4_duty" 1 353 "void(int16 value)" `171 
c L "set_pwm4_duty" 1 5 3 "FUNCTION"
v L "mode" 1 360 "int32" `177 
f B "setup_spi" 1 360 "void(int32 mode)" `176 
v L "value" 1 361 "int8" `179 
f B "spi_write" 1 361 "void(int8 value)" `178 
f B "spi_read" 1 362 "int8()" `180 
v L "value" 1 363 "int8" `182 
f G "spi_read" 1 363 "int8(int8 value)" `181 
f B "spi_data_in" 1 364 "int8()" `183  "Constants used in SETUP_SPI() are:"
d G "SPI_DISABLED" 1 366 "0x00"
d G "SPI_MASTER" 1 367 "0x20"
d G "SPI_SLAVE" 1 368 "0x24"
d G "SPI_SCK_IDLE_HIGH" 1 369 "0x10"
d G "SPI_SCK_IDLE_LOW" 1 370 "0x00"
d G "SPI_CLK_DIV_4" 1 371 "0x00"
d G "SPI_CLK_DIV_16" 1 372 "0x01"
d G "SPI_CLK_DIV_64" 1 373 "0x02"
d G "SPI_CLK_T2" 1 374 "0x03"
d G "SPI_SS_DISABLED" 1 375 "0x01"
d G "SPI_XMIT_L_TO_H" 1 378 "0x4000"
d G "SPI_XMIT_H_TO_L" 1 379 "0x0000"
d G "SPI_SAMPLE_AT_MIDDLE" 1 381 "0x0000"
d G "SPI_SAMPLE_AT_END" 1 382 "0x8000"
d G "SPI_L_TO_H" 1 385 "SPI_SCK_IDLE_LOW"
d G "SPI_H_TO_L" 1 386 "SPI_SCK_IDLE_HIGH"
c L "spi_data_in" 1 5 2 "FUNCTION"
v L "baud" 1 390 "int32" `185 
f B "setup_uart" 1 390 "void(int32 baud)" `184 
v L "baud" 1 391 "int32" `187 
v L "stream" 1 391 "int8" `188 
f G "setup_uart" 1 391 "void(int32 baud,int8 stream)" `186 
v L "baud" 1 392 "int32" `190 
v L "stream" 1 392 "int8" `191 
v L "clock" 1 392 "int32" `192 
f G "setup_uart" 1 392 "void(int32 baud,int8 stream,int32 clock)" `189 
v L "baud" 1 393 "int32" `194 
f B "set_uart_speed" 1 393 "void(int32 baud)" `193 
v L "baud" 1 394 "int32" `196 
v L "stream" 1 394 "int8" `197 
f G "set_uart_speed" 1 394 "void(int32 baud,int8 stream)" `195 
v L "baud" 1 395 "int32" `199 
v L "stream" 1 395 "int8" `200 
v L "clock" 1 395 "int32" `201 
f G "set_uart_speed" 1 395 "void(int32 baud,int8 stream,int32 clock)" `198  "Constants used in setup_uart() are:"
d G "UART_ADDRESS" 1 399 "2"
d G "UART_DATA" 1 400 "4"
d G "UART_AUTODETECT" 1 401 "8"
d G "UART_AUTODETECT_NOWAIT" 1 402 "9"
d G "UART_WAKEUP_ON_RDA" 1 403 "10"
d G "UART_SEND_BREAK" 1 404 "13"
c L "set_uart_speed" 1 5 3 "FUNCTION"
v L "mode" 1 408 "int32" `203 
f B "setup_comparator" 1 408 "void(int32 mode)" `202  "Constants used in setup_comparator() are:"
d G "NC_NC_NC_NC" 1 411 "0x00"
d G "CP1_A1_A0" 1 414 "0x8000"
d G "CP1_C1_A0" 1 415 "0x8001"
d G "CP1_C2_A0" 1 416 "0x8002"
d G "CP1_C3_A0" 1 417 "0x8003"
d G "CP1_A1_DAC" 1 418 "0x8010"
d G "CP1_C1_DAC" 1 419 "0x8011"
d G "CP1_C2_DAC" 1 420 "0x8012"
d G "CP1_C3_DAC" 1 421 "0x8013"
d G "CP1_A1_FVR" 1 422 "0x8020"
d G "CP1_C1_FVR" 1 423 "0x8021"
d G "CP1_C2_FVR" 1 424 "0x8022"
d G "CP1_C3_FVR" 1 425 "0x8023"
d G "CP1_A1_VSS" 1 426 "0x8030"
d G "CP1_C1_VSS" 1 427 "0x8031"
d G "CP1_C2_VSS" 1 428 "0x8032"
d G "CP1_C3_VSS" 1 429 "0x8033"
d G "CP1_INT_L2H" 1 431 "0x0080"
d G "CP1_INT_H2L" 1 432 "0x0040"
d G "CP1_OUT_ON_A2" 1 433 "0x2000"
d G "CP1_INVERT" 1 434 "0x1000"
d G "CP1_FAST" 1 435 "0x0400"
d G "CP1_HYST" 1 436 "0x0200"
d G "CP1_SYNC" 1 437 "0x0100"
d G "CP2_A1_C0" 1 440 "0x80000000"
d G "CP2_C1_C0" 1 441 "0x80010000"
d G "CP2_C2_C0" 1 442 "0x80020000"
d G "CP2_C3_C0" 1 443 "0x80030000"
d G "CP2_A1_DAC" 1 444 "0x80100000"
d G "CP2_C1_DAC" 1 445 "0x80110000"
d G "CP2_C2_DAC" 1 446 "0x80120000"
d G "CP2_C3_DAC" 1 447 "0x80130000"
d G "CP2_A1_FVR" 1 448 "0x80200000"
d G "CP2_C1_FVR" 1 449 "0x80210000"
d G "CP2_C2_FVR" 1 450 "0x80220000"
d G "CP2_C3_FVR" 1 451 "0x80230000"
d G "CP2_A1_VSS" 1 452 "0x80300000"
d G "CP2_C1_VSS" 1 453 "0x80310000"
d G "CP2_C2_VSS" 1 454 "0x80320000"
d G "CP2_C3_VSS" 1 455 "0x80330000"
d G "CP2_INT_L2H" 1 457 "0x00800000"
d G "CP2_INT_H2L" 1 458 "0x00400000"
d G "CP2_OUT_ON_C4" 1 459 "0x20000000"
d G "CP2_INVERT" 1 460 "0x10000000"
d G "CP2_FAST" 1 461 "0x04000000"
d G "CP2_HYST" 1 462 "0x02000000"
d G "CP2_SYNC" 1 463 "0x01000000"
c L "setup_comparator" 1 5 2 "FUNCTION"
v L "mode" 1 470 "int8" `207 
f B "setup_vref" 1 470 "void(int8 mode)" `206  "Constants used in setup_vref() are:"
d G "VREF_OFF" 1 472 "0"
d G "VREF_ON" 1 473 "0x80"
d G "VREF_ADC_OFF" 1 475 "0"
d G "VREF_ADC_1v024" 1 476 "0x01"
d G "VREF_ADC_2v048" 1 477 "0x02"
d G "VREF_ADC_4v096" 1 478 "0x03"
d G "VREF_COMP_DAC_OFF" 1 480 "0"
d G "VREF_COMP_DAC_1v024" 1 481 "0x04"
d G "VREF_COMP_DAC_2v048" 1 482 "0x08"
d G "VREF_COMP_DAC_4v096" 1 483 "0x0C"
d G "TEMPERATURE_INDICATOR_DISABLED" 1 485 "0"
d G "TEMPERATURE_INDICATOR_ENABLED" 1 486 "0x20"
d G "TEMPERATURE_RANGE_LOW" 1 487 "0"
d G "TEMPERATURE_RANGE_HIGH" 1 488 "0x10"
c L "setup_vref" 1 5 3 "FUNCTION"
v L "mode" 1 493 "int8" `209 
f B "setup_dac" 1 493 "void(int8 mode)" `208 
v L "value" 1 494 "int8" `211 
f B "dac_write" 1 494 "void(int8 value)" `210  "Constants used in SETUP_DAC() are:"
d G "DAC_OFF" 1 496 "0"
d G "DAC_VSS_VDD" 1 497 "0x80"
d G "DAC_VREF_VDD" 1 498 "0x81"
d G "DAC_VSS_VREF" 1 499 "0x84"
d G "DAC_VREF_VREF" 1 500 "0x85"
d G "DAC_VSS_FVR" 1 501 "0x88"
d G "DAC_FVR_VREF" 1 502 "0x89"
d G "DAC_OUTPUT" 1 504 "0x20"
d G "DAC_LVP_POS" 1 505 "0x40"
d G "DAC_LVP_NEG" 1 506 "0"
c L "dac_write" 1 5 2 "FUNCTION"
v L "mode" 1 511 "int8" `213 
f B "setup_oscillator" 1 511 "void(int8 mode)" `212  "Constants used in setup_oscillator() are:"
d G "OSC_31KHZ" 1 514 "0"
d G "OSC_31250" 1 515 " (2*8)"
d G "OSC_62KHZ" 1 516 " (4*8)"
d G "OSC_125KHZ" 1 517 " (5*8)"
d G "OSC_250KHZ" 1 518 " (6*8)"
d G "OSC_500KHZ" 1 519 " (7*8)"
d G "OSC_1MHZ" 1 520 " (11*8)"
d G "OSC_2MHZ" 1 521 " (12*8)"
d G "OSC_4MHZ" 1 522 " (13*8)"
d G "OSC_8MHZ" 1 523 " (14*8)"
d G "OSC_16MHZ" 1 524 " (15*8)"
d G "OSC_TIMER1" 1 526 "1"
d G "OSC_INTRC" 1 527 "2"
d G "OSC_NORMAL" 1 528 "0"
d G "OSC_PLL_ON" 1 530 "0x80"
d G "OSC_PLL_OFF" 1 531 "0"
c L "setup_oscillator" 1 5 4 "FUNCTION"
v L "mode" 1 538 "int16" `215 
f B "setup_adc" 1 538 "void(int16 mode)" `214 
f B "read_adc" 1 539 "int8()" `216 
v L "mode" 1 540 "int8" `218 
f G "read_adc" 1 540 "int8(int8 mode)" `217 
f G "read_adc" 1 541 "int16()" `219 
v L "mode" 1 542 "int8" `221 
f G "read_adc" 1 542 "int16(int8 mode)" `220 
f B "adc_done" 1 543 "int8()" `222  "Constants used for SETUP_ADC() are:"
d G "ADC_OFF" 1 545 "0" "ADC Off"
d G "ADC_CLOCK_DIV_2" 1 546 "0x100"
d G "ADC_CLOCK_DIV_4" 1 547 "0x40"
d G "ADC_CLOCK_DIV_8" 1 548 "0x10"
d G "ADC_CLOCK_DIV_32" 1 549 "0x20"
d G "ADC_CLOCK_DIV_16" 1 550 "0x50"
d G "ADC_CLOCK_DIV_64" 1 551 "0x60"
d G "ADC_CLOCK_INTERNAL" 1 552 "0x30" "Internal 2-6us"
c L "adc_done" 1 5 1 "FUNCTION"
v L "pins" 1 555 "int32" `224 
f B "setup_adc_ports" 1 555 "void(int32 pins)" `223 
v L "pins" 1 556 "int32" `226 
v L "reference" 1 556 "int32" `227 
f G "setup_adc_ports" 1 556 "void(int32 pins,int32 reference)" `225 
v L "channel" 1 557 "int8" `229 
f B "set_adc_channel" 1 557 "void(int8 channel)" `228  "Constants used in SETUP_ADC_PORTS() are:"
d G "sAN0" 1 561 "0x00010000" "| A0"
d G "sAN1" 1 562 "0x00020000" "| A1"
d G "sAN2" 1 563 "0x00040000" "| A2"
d G "sAN3" 1 564 "0x00100000" "| A4"
d G "sAN4" 1 565 "0x00000100" "| C0"
d G "sAN5" 1 566 "0x00000200" "| C1"
d G "sAN6" 1 567 "0x00000400" "| C2"
d G "sAN7" 1 568 "0x00000800" "| C3"
d G "sAN8" 1 569 "0x00004000" "| C6"
d G "sAN9" 1 570 "0x00008000" "| C7"
d G "sAN10" 1 571 "0x00000010" "| B4"
d G "sAN11" 1 572 "0x00000020" "| B5"
d G "NO_ANALOGS" 1 573 "0" "None"
d G "ALL_ANALOG" 1 574 "0x0017CF30" "A0 A1 A2 A4 C0 C1 C2 C3 C6 C7 B4 B5"
d G "VSS_VDD" 1 577 "0x00000000" "| Range 0-Vdd"
d G "VSS_VREF" 1 578 "0x02000000" "| Range 0-VrefH"
d G "VSS_FVR" 1 579 "0x03000000" "| Range 0-Fixed Voltage Reference"
d G "VREF_VDD" 1 580 "0x04000000" "| Range VrefL-Vdd"
d G "VREF_VREF" 1 581 "0x06000000" "| Range VrefL-VrefH"
d G "VREF_FVR" 1 582 "0x07000000" "| Range VrefL-Fixed Voltage Reference"
d G "TEMPERATURE_INDICATOR" 1 586 "0x1D"
d G "DAC_CHANNEL" 1 587 "0x1E"
d G "FVR_CHANNEL" 1 588 "0x1F"
d G "ADC_START_AND_READ" 1 591 "7" "This is the default if nothing is specified"
d G "ADC_START_ONLY" 1 592 "1"
d G "ADC_READ_ONLY" 1 593 "6"
c L "set_adc_channel" 1 5 3 "FUNCTION"
v L "x" 1 599 "sint8" `231 
f B "abs" 1 599 "sint8(sint8 x)" `230 
v L "x" 1 600 "sint16" `233 
f G "abs" 1 600 "sint16(sint16 x)" `232 
v L "x" 1 601 "sint32" `235 
f G "abs" 1 601 "sint32(sint32 x)" `234 
v L "x" 1 602 "float" `237 
f G "abs" 1 602 "float(float x)" `236 
v L "??65535" 1 603 "int8" `239 
v L "??65535" 1 603 "int8" `240 
f B "_mul" 1 603 "int16(int8 ,int8 )" `238 
v L "??65535" 1 604 "sint8" `239 
v L "??65535" 1 604 "sint8" `243 
f G "_mul" 1 604 "sint16(sint8 ,sint8 )" `241 
v L "??65535" 1 605 "int16" `239 
v L "??65535" 1 605 "int16" `246 
f G "_mul" 1 605 "int32(int16 ,int16 )" `244 
v L "??65535" 1 606 "sint16" `239 
v L "??65535" 1 606 "sint16" `249 
f G "_mul" 1 606 "sint32(sint16 ,sint16 )" `247  "Memory Manipulation Prototypes:"
v L "bank" 1 609 "int8" `251 
v L "offset" 1 609 "int8" `252 
f B "read_bank" 1 609 "int8(int8 bank,int8 offset)" `250 
v L "bank" 1 610 "int8" `254 
v L "offset" 1 610 "int8" `255 
v L "value" 1 610 "int8" `256 
f B "write_bank" 1 610 "void(int8 bank,int8 offset,int8 value)" `253 
v L "dest" 1 611 "*int8" `258 
v L "src" 1 611 "*int8" `259 
f B "strcpy" 1 611 "void(*int8 dest,*int8 src)" `257 
v L "dest" 1 612 "*int8" `261 
v L "src" 1 612 "*int8" `262 
f B "strcopy" 1 612 "void(*int8 dest,*int8 src)" `260 
v L "destination" 1 613 "*int8" `264 
v L "value" 1 613 "int8" `265 
v L "num" 1 613 "int16" `266 
f B "memset" 1 613 "void(*int8 destination,int8 value,int16 num)" `263 
v L "destination" 1 614 "*int8" `268 
v L "source" 1 614 "*int8" `269 
v L "num" 1 614 "int16" `270 
f B "memcpy" 1 614 "void(*int8 destination,*int8 source,int16 num)" `267  "String Prototypes:"
v L "cvalue" 1 617 "int8" `272 
f B "toupper" 1 617 "int8(int8 cvalue)" `271 
v L "cvalue" 1 618 "int8" `274 
f B "tolower" 1 618 "int8(int8 cvalue)" `273 
v L "string" 1 619 "*int8" `276 
v L "cstring" 1 619 "*int8" `277 
f B "sprintf" 1 619 "void(*int8 string,*int8 cstring,*int8 _VA_LIST)" `275  "Data Manipulators Prototypes:"
v L "address" 1 622 "*int8" `280 
v L "bytes" 1 622 "int8" `281 
v L "value" 1 622 "int8" `282 
f B "shift_left" 1 622 "int8(*int8 address,int8 bytes,int8 value)" `279 
v L "address" 1 623 "*int8" `284 
v L "bytes" 1 623 "int8" `285 
v L "value" 1 623 "int8" `286 
f B "shift_right" 1 623 "int8(*int8 address,int8 bytes,int8 value)" `283 
v L "address" 1 624 "*int8" `288 
v L "bytes" 1 624 "int8" `289 
f B "rotate_left" 1 624 "void(*int8 address,int8 bytes)" `287 
v L "address" 1 625 "*int8" `291 
v L "bytes" 1 625 "int8" `292 
f B "rotate_right" 1 625 "void(*int8 address,int8 bytes)" `290 
v L "value" 1 626 "int8" `294 
f B "swap" 1 626 "void(int8 value)" `293 
v L "var" 1 627 "int16" `296 
v L "offset" 1 627 "int8" `297 
f B "make8" 1 627 "int8(int16 var,int8 offset)" `295 
v L "var" 1 628 "int32" `296 
v L "offset" 1 628 "int8" `300 
f G "make8" 1 628 "int8(int32 var,int8 offset)" `298 
v L "varhigh" 1 629 "int8" `302 
v L "varlow" 1 629 "int8" `303 
f B "make16" 1 629 "int16(int8 varhigh,int8 varlow)" `301 
v L "var1" 1 630 "int16" `305 
f B "make32" 1 630 "int32(int16 var1)" `304 
v L "var1" 1 631 "int16" `307 
v L "var2" 1 631 "int16" `308 
f G "make32" 1 631 "int32(int16 var1,int16 var2)" `306 
v L "var1" 1 632 "int16" `307 
v L "var2" 1 632 "int8" `311 
f G "make32" 1 632 "int32(int16 var1,int8 var2)" `309 
v L "var1" 1 633 "int16" `313 
v L "var2" 1 633 "int8" `314 
v L "var3" 1 633 "int8" `315 
f G "make32" 1 633 "int32(int16 var1,int8 var2,int8 var3)" `312 
v L "var1" 1 634 "int8" `317 
f G "make32" 1 634 "int32(int8 var1)" `316 
v L "var1" 1 635 "int8" `307 
v L "var2" 1 635 "int8" `320 
f G "make32" 1 635 "int32(int8 var1,int8 var2)" `318 
v L "var1" 1 636 "int8" `313 
v L "var2" 1 636 "int8" `314 
v L "var3" 1 636 "int8" `324 
f G "make32" 1 636 "int32(int8 var1,int8 var2,int8 var3)" `321 
v L "var1" 1 637 "int8" `326 
v L "var2" 1 637 "int8" `327 
v L "var3" 1 637 "int8" `328 
v L "var4" 1 637 "int8" `329 
f G "make32" 1 637 "int32(int8 var1,int8 var2,int8 var3,int8 var4)" `325 
v L "var1" 1 638 "int8" `307 
v L "var2" 1 638 "int16" `332 
f G "make32" 1 638 "int32(int8 var1,int16 var2)" `330 
v L "var1" 1 639 "int8" `313 
v L "var2" 1 639 "int16" `314 
v L "var3" 1 639 "int8" `336 
f G "make32" 1 639 "int32(int8 var1,int16 var2,int8 var3)" `333 
v L "var1" 1 640 "int8" `313 
v L "var2" 1 640 "int8" `314 
v L "var3" 1 640 "int16" `340 
f G "make32" 1 640 "int32(int8 var1,int8 var2,int16 var3)" `337 
v L "var" 1 641 "int8" `342 
v L "bit" 1 641 "int8" `343 
f B "bit_set" 1 641 "void(int8 var,int8 bit)" `341 
v L "var" 1 642 "int16" `342 
v L "bit" 1 642 "int8" `346 
f G "bit_set" 1 642 "void(int16 var,int8 bit)" `344 
v L "var" 1 643 "int32" `342 
v L "bit" 1 643 "int8" `349 
f G "bit_set" 1 643 "void(int32 var,int8 bit)" `347 
v L "var" 1 644 "int8" `351 
v L "bit" 1 644 "int8" `352 
f B "bit_clear" 1 644 "void(int8 var,int8 bit)" `350 
v L "var" 1 645 "int16" `351 
v L "bit" 1 645 "int8" `355 
f G "bit_clear" 1 645 "void(int16 var,int8 bit)" `353 
v L "var" 1 646 "int32" `351 
v L "bit" 1 646 "int8" `358 
f G "bit_clear" 1 646 "void(int32 var,int8 bit)" `356 
v L "var" 1 647 "int8" `360 
v L "bit" 1 647 "int8" `361 
f B "bit_test" 1 647 "int8(int8 var,int8 bit)" `359 
v L "var" 1 648 "int16" `360 
v L "bit" 1 648 "int8" `364 
f G "bit_test" 1 648 "int8(int16 var,int8 bit)" `362 
v L "var" 1 649 "int32" `360 
v L "bit" 1 649 "int8" `367 
f G "bit_test" 1 649 "int8(int32 var,int8 bit)" `365  "#use delay() Prototypes:"
v L "count" 1 652 "int8" `369 
f B "delay_cycles" 1 652 "void(int8 count)" `368 
v L "time" 1 653 "int16" `371 
f B "delay_ms" 1 653 "void(int16 time)" `370 
v L "time" 1 654 "int16" `373 
f B "delay_us" 1 654 "void(int16 time)" `372  "#use rs232() Prototypes:"
v L "cdata" 1 657 "int8" `375 
f B "putchar" 1 657 "void(int8 cdata)" `374 
v L "cdata" 1 658 "int8" `377 
v L "stream" 1 658 "int8" `378 
f G "putchar" 1 658 "void(int8 cdata,int8 stream)" `376 
v L "string" 1 659 "*int8" `380 
f B "puts" 1 659 "void(*int8 string)" `379 
v L "string" 1 660 "*int8" `382 
v L "stream" 1 660 "int8" `383 
f G "puts" 1 660 "void(*int8 string,int8 stream)" `381 
f B "getch" 1 661 "int8()" `384 
v L "stream" 1 662 "int8" `386 
f G "getch" 1 662 "int8(int8 stream)" `385 
v L "string" 1 663 "*int8" `388 
f B "gets" 1 663 "void(*int8 string)" `387 
v L "string" 1 664 "*int8" `390 
v L "stream" 1 664 "int8" `391 
f G "gets" 1 664 "void(*int8 string,int8 stream)" `389 
f B "kbhit" 1 665 "int8()" `392 
v L "stream" 1 666 "int8" `394 
f G "kbhit" 1 666 "int8(int8 stream)" `393 
v L "string" 1 667 "*int8" `396 
f B "printf" 1 667 "void(*int8 string,*int8 _VA_LIST)" `395 
v L "stream" 1 668 "int8" `399 
v L "string" 1 668 "*int8" `400 
f B "fprintf" 1 668 "void(int8 stream,*int8 string,*int8 _VA_LIST)" `398 
f B "putc_send" 1 669 "void()" `402 
v L "stream" 1 670 "int8" `404 
f B "fputc_send" 1 670 "void(int8 stream)" `403 
f B "rcv_buffer_full" 1 671 "int8()" `405 
v L "stream" 1 672 "int8" `407 
f G "rcv_buffer_full" 1 672 "int8(int8 stream)" `406 
f B "rcv_buffer_bytes" 1 673 "int16()" `408 
v L "stream" 1 674 "int8" `410 
f G "rcv_buffer_bytes" 1 674 "int16(int8 stream)" `409 
f B "tx_buffer_full" 1 675 "int8()" `411 
v L "stream" 1 676 "int8" `413 
f G "tx_buffer_full" 1 676 "int8(int8 stream)" `412 
f B "tx_buffer_bytes" 1 677 "int16()" `414 
v L "stream" 1 678 "int8" `416 
f G "tx_buffer_bytes" 1 678 "int16(int8 stream)" `415  "#use i2c() Prototypes:"
f B "i2c_read" 1 681 "int8()" `417 
v L "stream" 1 682 "int8" `419 
f G "i2c_read" 1 682 "int8(int8 stream)" `418 
v L "stream" 1 683 "int8" `421 
v L "ack" 1 683 "int8" `422 
f G "i2c_read" 1 683 "int8(int8 stream,int8 ack)" `420 
v L "data" 1 684 "int8" `424 
f B "i2c_write" 1 684 "int8(int8 data)" `423 
v L "stream" 1 685 "int8" `426 
v L "data" 1 685 "int8" `427 
f G "i2c_write" 1 685 "int8(int8 stream,int8 data)" `425 
f B "i2c_start" 1 686 "void()" `428 
v L "stream" 1 687 "int8" `430 
f G "i2c_start" 1 687 "void(int8 stream)" `429 
v L "stream" 1 688 "int8" `432 
v L "restart" 1 688 "int8" `433 
f G "i2c_start" 1 688 "void(int8 stream,int8 restart)" `431 
f B "i2c_stop" 1 689 "void()" `434 
v L "stream" 1 690 "int8" `436 
f G "i2c_stop" 1 690 "void(int8 stream)" `435 
f B "i2c_isr_state" 1 691 "int8()" `437 
v L "addr" 1 692 "int8" `439 
f B "i2c_slaveaddr" 1 692 "void(int8 addr)" `438 
v L "stream" 1 693 "int8" `441 
v L "addr" 1 693 "int8" `442 
f G "i2c_slaveaddr" 1 693 "void(int8 stream,int8 addr)" `440 
f B "i2c_poll" 1 694 "int8()" `443 
v L "stream" 1 695 "int8" `445 
f G "i2c_poll" 1 695 "int8(int8 stream)" `444 
v L "baud" 1 696 "int32" `447 
f B "i2c_init" 1 696 "void(int32 baud)" `446 
v L "stream" 1 697 "int8" `449 
v L "baud" 1 697 "int32" `450 
f G "i2c_init" 1 697 "void(int8 stream,int32 baud)" `448  "#use spi() Prototypes:"
f B "spi_xfer" 1 700 "int8()" `451 
f G "spi_xfer" 1 701 "int16()" `452 
f G "spi_xfer" 1 702 "int32()" `453 
v L "data" 1 703 "int8" `455 
f G "spi_xfer" 1 703 "int8(int8 data)" `454 
v L "data" 1 704 "int16" `457 
f G "spi_xfer" 1 704 "int16(int16 data)" `456 
v L "data" 1 705 "int32" `459 
f G "spi_xfer" 1 705 "int32(int32 data)" `458 
v L "stream" 1 706 "int8" `461 
v L "data" 1 706 "int8" `462 
f G "spi_xfer" 1 706 "int8(int8 stream,int8 data)" `460 
v L "stream" 1 707 "int8" `461 
v L "data" 1 707 "int16" `465 
f G "spi_xfer" 1 707 "int16(int8 stream,int16 data)" `463 
v L "stream" 1 708 "int8" `461 
v L "data" 1 708 "int32" `468 
f G "spi_xfer" 1 708 "int32(int8 stream,int32 data)" `466 
v L "stream" 1 709 "int8" `470 
v L "data" 1 709 "int8" `471 
v L "bits" 1 709 "int8" `472 
f G "spi_xfer" 1 709 "int8(int8 stream,int8 data,int8 bits)" `469 
v L "stream" 1 710 "int8" `470 
v L "data" 1 710 "int16" `471 
v L "bits" 1 710 "int8" `476 
f G "spi_xfer" 1 710 "int16(int8 stream,int16 data,int8 bits)" `473 
v L "stream" 1 711 "int8" `470 
v L "data" 1 711 "int32" `471 
v L "bits" 1 711 "int8" `480 
f G "spi_xfer" 1 711 "int32(int8 stream,int32 data,int8 bits)" `477 
v L "baud" 1 712 "int32" `482 
f B "spi_init" 1 712 "void(int32 baud)" `481 
v L "stream" 1 713 "int8" `484 
v L "baud" 1 713 "int32" `485 
f G "spi_init" 1 713 "void(int8 stream,int32 baud)" `483 
v L "baud" 1 714 "int32" `487 
f B "spi_speed" 1 714 "void(int32 baud)" `486 
v L "stream" 1 715 "int8" `489 
v L "baud" 1 715 "int32" `490 
f G "spi_speed" 1 715 "void(int8 stream,int32 baud)" `488 
v L "stream" 1 716 "int8" `492 
v L "baud" 1 716 "int32" `493 
v L "clock" 1 716 "int32" `494 
f G "spi_speed" 1 716 "void(int8 stream,int32 baud,int32 clock)" `491 
v L "data" 1 717 "int8" `496 
f B "spi_prewrite" 1 717 "void(int8 data)" `495 
v L "data" 1 718 "int16" `498 
f G "spi_prewrite" 1 718 "void(int16 data)" `497 
v L "data" 1 719 "int32" `500 
f G "spi_prewrite" 1 719 "void(int32 data)" `499 
v L "??65535" 1 720 "int8" `502 
v L "data" 1 720 "int8" `503 
f G "spi_prewrite" 1 720 "void(int8 ,int8 data)" `501 
v L "??65535" 1 721 "int8" `502 
v L "data" 1 721 "int16" `506 
f G "spi_prewrite" 1 721 "void(int8 ,int16 data)" `504 
v L "??65535" 1 722 "int8" `502 
v L "data" 1 722 "int32" `509 
f G "spi_prewrite" 1 722 "void(int8 ,int32 data)" `507 
f B "spi_xfer_in" 1 723 "int8()" `510 
f G "spi_xfer_in" 1 724 "int16()" `511 
f G "spi_xfer_in" 1 725 "int32()" `512 
v L "bits" 1 726 "int8" `514 
f G "spi_xfer_in" 1 726 "int8(int8 bits)" `513 
v L "bits" 1 727 "int8" `516 
f G "spi_xfer_in" 1 727 "int16(int8 bits)" `515 
v L "bits" 1 728 "int8" `518 
f G "spi_xfer_in" 1 728 "int32(int8 bits)" `517 
v L "stream" 1 729 "int8" `520 
v L "bits" 1 729 "int8" `521 
f G "spi_xfer_in" 1 729 "int8(int8 stream,int8 bits)" `519 
v L "stream" 1 730 "int8" `520 
v L "bits" 1 730 "int8" `524 
f G "spi_xfer_in" 1 730 "int16(int8 stream,int8 bits)" `522 
v L "stream" 1 731 "int8" `520 
v L "bits" 1 731 "int8" `527 
f G "spi_xfer_in" 1 731 "int32(int8 stream,int8 bits)" `525  "#use rtos() Prototypes:"
f B "rtos_run" 1 734 "void()" `528 
f B "rtos_yield" 1 735 "void()" `529 
v L "task" 1 736 "int8" `531 
f B "rtos_enable" 1 736 "void(int8 task)" `530 
v L "task" 1 737 "int8" `533 
f B "rtos_disable" 1 737 "void(int8 task)" `532 
f B "rtos_terminate" 1 738 "void()" `534 
v L "flag" 1 739 "int8" `536 
f B "rtos_await" 1 739 "void(int8 flag)" `535 
v L "sem" 1 740 "int8" `538 
f B "rtos_wait" 1 740 "void(int8 sem)" `537 
v L "sem" 1 741 "int8" `540 
f B "rtos_signal" 1 741 "void(int8 sem)" `539 
v L "task" 1 742 "int8" `542 
v L "msg" 1 742 "int8" `543 
f B "rtos_msg_send" 1 742 "void(int8 task,int8 msg)" `541 
f B "rtos_msg_read" 1 743 "int8()" `544 
f B "rtos_msg_poll" 1 744 "int8()" `545 
v L "task" 1 745 "int8" `547 
f B "rtos_overrun" 1 745 "int8(int8 task)" `546 
v L "task" 1 746 "int8" `549 
v L "stat" 1 746 "*int8" `550 
f B "rtos_stats" 1 746 "void(int8 task,*int8 stat)" `548  "#use timer() Prototypes:"
f B "get_ticks" 1 749 "int8()" `551 
f G "get_ticks" 1 750 "int16()" `552 
f G "get_ticks" 1 751 "int32()" `553 
v L "stream" 1 752 "int8" `555 
f G "get_ticks" 1 752 "int8(int8 stream)" `554 
v L "stream" 1 753 "int8" `557 
f G "get_ticks" 1 753 "int16(int8 stream)" `556 
v L "stream" 1 754 "int8" `559 
f G "get_ticks" 1 754 "int32(int8 stream)" `558 
v L "value" 1 755 "int8" `561 
f B "set_ticks" 1 755 "void(int8 value)" `560 
v L "value" 1 756 "int16" `563 
f G "set_ticks" 1 756 "void(int16 value)" `562 
v L "value" 1 757 "int32" `565 
f G "set_ticks" 1 757 "void(int32 value)" `564 
v L "stream" 1 758 "int8" `567 
v L "value" 1 758 "int8" `568 
f G "set_ticks" 1 758 "void(int8 stream,int8 value)" `566 
v L "stream" 1 759 "int8" `567 
v L "value" 1 759 "int16" `571 
f G "set_ticks" 1 759 "void(int8 stream,int16 value)" `569 
v L "stream" 1 760 "int8" `567 
v L "value" 1 760 "int32" `574 
f G "set_ticks" 1 760 "void(int8 stream,int32 value)" `572  "#use pwm() Prototypes:"
f B "pwm_on" 1 763 "void()" `575 
v L "stream" 1 764 "int8" `577 
f G "pwm_on" 1 764 "void(int8 stream)" `576 
f B "pwm_off" 1 765 "void()" `578 
v L "stream" 1 766 "int8" `580 
f G "pwm_off" 1 766 "void(int8 stream)" `579 
v L "duty" 1 767 "int16" `582 
f B "pwm_set_duty" 1 767 "void(int16 duty)" `581 
v L "stream" 1 768 "int8" `584 
v L "duty" 1 768 "int16" `585 
f G "pwm_set_duty" 1 768 "void(int8 stream,int16 duty)" `583 
v L "percent" 1 769 "int16" `587 
f B "pwm_set_duty_percent" 1 769 "void(int16 percent)" `586 
v L "stream" 1 770 "int8" `589 
v L "percent" 1 770 "int16" `590 
f G "pwm_set_duty_percent" 1 770 "void(int8 stream,int16 percent)" `588 
v L "frequency" 1 771 "int32" `592 
f B "pwm_set_frequency" 1 771 "void(int32 frequency)" `591 
v L "stream" 1 772 "int8" `594 
v L "frequency" 1 772 "int32" `595 
f G "pwm_set_frequency" 1 772 "void(int8 stream,int32 frequency)" `593  "#use capture() Prototypes:"
f B "get_capture_time" 1 775 "int16()" `596 
v L "stream" 1 776 "int8" `598 
f G "get_capture_time" 1 776 "int16(int8 stream)" `597 
f B "get_capture_event" 1 777 "int8()" `599 
v L "stream" 1 778 "int8" `601 
f G "get_capture_event" 1 778 "int8(int8 stream)" `600  "Enviroment Prototypes:"
c L "get_capture_event" 1 5 2 "FUNCTION"
v L "address" 1 791 "int16" `603 
f B "goto_address" 1 791 "void(int16 address)" `602 
v L "label" 1 792 "int16" `605 
f B "label_address" 1 792 "int16(int16 label)" `604  "Program Memory Prototypes:"
v L "address" 1 795 "int16" `607 
v L "dataptr" 1 795 "*int8" `608 
v L "count" 1 795 "int16" `609 
f B "read_program_memory" 1 795 "void(int16 address,*int8 dataptr,int16 count)" `606 
v L "address" 1 796 "int16" `611 
f B "read_program_eeprom" 1 796 "int16(int16 address)" `610 
v L "address" 1 797 "int16" `613 
f B "erase_program_eeprom" 1 797 "void(int16 address)" `612 
v L "address" 1 798 "int16" `615 
v L "dataptr" 1 798 "*int8" `616 
v L "count" 1 798 "int16" `617 
f B "write_program_memory" 1 798 "void(int16 address,*int8 dataptr,int16 count)" `614 
v L "address" 1 799 "int16" `619 
v L "data" 1 799 "int16" `620 
f B "write_program_eeprom" 1 799 "void(int16 address,int16 data)" `618  "EEPROM Prototypes:"
t G "__EEADDRESS__" 1 804 "int16" `621 
v L "address" 1 809 "__EEADDRESS__" `623 
f B "read_eeprom" 1 809 "int8(__EEADDRESS__ address)" `622 
v L "address" 1 810 "__EEADDRESS__" `625 
v L "value" 1 810 "int8" `626 
f B "write_eeprom" 1 810 "void(__EEADDRESS__ address,int8 value)" `624  "#use touchpad() Prototypes:"
v L "state" 1 813 "int8" `628 
f B "touchpad_state" 1 813 "void(int8 state)" `627 
f B "touchpad_getc" 1 814 "int8()" `629 
f B "touchpad_hit" 1 815 "int8()" `630  "INT"
c L "touchpad_hit" 1 5 4 "FUNCTION"
v L "interrupt" 1 821 "int32" `632 
f B "enable_interrupts" 1 821 "void(int32 interrupt)" `631 
v L "interrupt" 1 822 "int32" `634 
f B "disable_interrupts" 1 822 "void(int32 interrupt)" `633 
v L "interrupt" 1 823 "int32" `636 
f B "clear_interrupt" 1 823 "void(int32 interrupt)" `635 
v L "interrupt" 1 824 "int32" `638 
f B "interrupt_active" 1 824 "int8(int32 interrupt)" `637 
v L "source" 1 825 "int8" `640 
v L "edge" 1 825 "int8" `641 
f B "ext_int_edge" 1 825 "void(int8 source,int8 edge)" `639 
v L "address" 1 826 "int16" `643 
f B "jump_to_irs" 1 826 "void(int16 address)" `642  "Constants used in EXT_INT_EDGE() are:"
d G "L_TO_H" 1 828 "0x40"
d G "H_TO_L" 1 829 "0"
d G "GLOBAL" 1 831 "0x0BC0"
d G "PERIPH" 1 832 "0x0B40"
d G "INT_RB" 1 833 "0x31FF0B08"
d G "INT_EXT_L2H" 1 834 "0x50000B10"
d G "INT_EXT_H2L" 1 835 "0x60000B10"
d G "INT_EXT" 1 836 "0x300B10"
d G "INT_TIMER0" 1 837 "0x300B20"
d G "INT_TIMER1" 1 838 "0x309101"
d G "INT_TIMER2" 1 839 "0x309102"
d G "INT_CCP1" 1 840 "0x309104"
d G "INT_SSP" 1 841 "0x309108"
d G "INT_TBE" 1 842 "0x309110"
d G "INT_RDA" 1 843 "0x309120"
d G "INT_AD" 1 844 "0x309140"
d G "INT_TIMER1_GATE" 1 845 "0x309180"
d G "INT_BUSCOL" 1 846 "0x309208"
d G "INT_EEPROM" 1 847 "0x309210"
d G "INT_COMP" 1 848 "0x309220"
d G "INT_COMP2" 1 849 "0x309240"
d G "INT_OSC_FAIL" 1 850 "0x309280"
d G "INT_TIMER4" 1 851 "0x309302"
d G "INT_TIMER6" 1 852 "0x309308"
d G "INT_CCP3" 1 853 "0x309310"
d G "INT_CCP4" 1 854 "0x309320"
d G "INT_CCP2" 1 855 "0x309201"
d G "INT_RA" 1 856 "0x30FF0B08"
d G "INT_RA0" 1 857 "0x30010B08"
d G "INT_RA0_L2H" 1 858 "0x10010B08"
d G "INT_RA0_H2L" 1 859 "0x20010B08"
d G "INT_RA1" 1 860 "0x30020B08"
d G "INT_RA1_L2H" 1 861 "0x10020B08"
d G "INT_RA1_H2L" 1 862 "0x20020B08"
d G "INT_RA2" 1 863 "0x30040B08"
d G "INT_RA2_L2H" 1 864 "0x10040B08"
d G "INT_RA2_H2L" 1 865 "0x20040B08"
d G "INT_RA3" 1 866 "0x30080B08"
d G "INT_RA3_L2H" 1 867 "0x10080B08"
d G "INT_RA3_H2L" 1 868 "0x20080B08"
d G "INT_RA4" 1 869 "0x30100B08"
d G "INT_RA4_L2H" 1 870 "0x10100B08"
d G "INT_RA4_H2L" 1 871 "0x20100B08"
d G "INT_RA5" 1 872 "0x30200B08"
d G "INT_RA5_L2H" 1 873 "0x10200B08"
d G "INT_RA5_H2L" 1 874 "0x20200B08"
d G "INT_RB4" 1 875 "0x31100B08"
d G "INT_RB4_L2H" 1 876 "0x11100B08"
d G "INT_RB4_H2L" 1 877 "0x21100B08"
d G "INT_RB5" 1 878 "0x31200B08"
d G "INT_RB5_L2H" 1 879 "0x11200B08"
d G "INT_RB5_H2L" 1 880 "0x21200B08"
d G "INT_RB6" 1 881 "0x31400B08"
d G "INT_RB6_L2H" 1 882 "0x11400B08"
d G "INT_RB6_H2L" 1 883 "0x21400B08"
d G "INT_RB7" 1 884 "0x31800B08"
d G "INT_RB7_L2H" 1 885 "0x11800B08"
d G "INT_RB7_H2L" 1 886 "0x21800B08"
D G "LED_PIN" 0 5 "PIN_C5"
D G "POT_PIN" 0 6 "PIN_A0"
F G "main" 0 9 "void()" `648 
V L "deger" 0 10 "int16" `649 
F B "reset_cpu" 0 0
F B "abs" 1 0
F B "sleep" 0 0
F B "delay_cycles" 1 0
F B "read_bank" 2 0
F B "write_bank" 3 0
F B "shift_left" 2 2
F B "shift_right" 2 2
F B "rotate_left" 2 0
F B "rotate_right" 2 0
F B "_mul" 2 0
F B "memset" 3 0
F B "isamoung" 2 0
F B "isamong" 2 0
F B "bit_set" 2 0
F B "bit_clear" 2 0
F B "bit_test" 2 0
F B "toupper" 1 0
F B "tolower" 1 0
F B "swap" 1 0
F B "printf" 1 255
F B "fprintf" 1 255
F B "sprintf" 1 255
F B "make8" 2 0
F B "make16" 2 0
F B "make32" 1 255
F B "label_address" 1 1
F B "goto_address" 1 0
F B "_va_arg" 1 0
F B "offsetofbit" 2 2
F B "_iosctrl" 1 2
F B "enable_interrupts" 1 0
F B "disable_interrupts" 1 0
F B "interrupt_active" 1 0
F B "clear_interrupt" 1 0
F B "jump_to_isr" 1 0
F B "ext_int_edge" 1 2
F B "read_eeprom" 1 0
F B "write_eeprom" 2 0
F B "read_program_eeprom" 1 0
F B "write_program_eeprom" 2 0
F B "write_program_memory" 4 0
F B "write_program_memory8" 4 0
F B "read_program_memory" 4 0
F B "read_program_memory8" 4 0
F B "read_rom_memory" 3 0
F B "strcpy" 2 0
F B "memcpy" 3 0
F B "strstr100" 2 0
F B "output_high" 1 0
F B "output_low" 1 0
F B "input" 1 0
F B "input_state" 1 0
F B "output_float" 1 0
F B "output_drive" 1 0
F B "output_bit" 1 1
F B "output_toggle" 1 0
F B "output_a" 1 0
F B "output_b" 1 0
F B "output_c" 1 0
F B "input_a" 0 0
F B "input_b" 0 0
F B "input_c" 0 0
F B "set_tris_a" 1 0
F B "set_tris_b" 1 0
F B "set_tris_c" 1 0
F B "get_tris_a" 0 0
F B "get_tris_b" 0 0
F B "get_tris_c" 0 0
F B "input_change_a" 0 0
F B "input_change_b" 0 0
F B "input_change_c" 0 0
F B "port_a_pullups" 1 0
F B "port_b_pullups" 1 0
F B "port_c_pullups" 1 0
F B "setup_counters" 2 0
F B "setup_wdt" 1 0
F B "restart_cause" 0 0
F B "restart_wdt" 0 0
F B "get_rtcc" 0 0
F B "set_rtcc" 1 0
F B "get_timer0" 0 0
F B "set_timer0" 1 0
F B "setup_comparator" 1 0
F B "setup_port_a" 1 2
F B "setup_adc_ports" 1 2
F B "get_adc_ports" 0 0
F B "setup_adc" 1 0
F B "set_adc_channel" 1 0
F B "read_adc" 0 1
F B "adc_done" 0 0
F B "setup_timer_0" 1 0
F B "setup_vref" 1 0
F B "setup_timer_1" 1 0
F B "get_timer1" 0 0
F B "set_timer1" 1 0
F B "setup_timer_2" 3 0
F B "get_timer2" 0 0
F B "set_timer2" 1 0
F B "setup_timer_4" 3 0
F B "get_timer4" 0 0
F B "set_timer4" 1 0
F B "setup_timer_6" 3 0
F B "get_timer6" 0 0
F B "set_timer6" 1 0
F B "setup_ccp1" 1 2
F B "set_pwm1_duty" 1 0
F B "setup_ccp2" 1 2
F B "set_pwm2_duty" 1 0
F B "setup_ccp3" 1 0
F B "set_pwm3_duty" 1 0
F B "setup_ccp4" 1 0
F B "set_pwm4_duty" 1 0
F B "setup_oscillator" 0 2
F B "setup_spi" 1 0
F B "spi_read" 0 1
F B "spi_write" 1 2
F B "spi_data_is_in" 0 0
F B "setup_spi2" 1 0
F B "spi_read2" 0 1
F B "spi_write2" 1 0
F B "spi_data_is_in2" 0 0
F B "setup_dac" 1 0
F B "dac_write" 1 0
F B "brownout_enable" 1 0
F B "delay_ms" 1 0
F B "delay_us" 1 0
